#+TITLE: C++中二维数组和指针数组的区别和寻址方式
#+DATE: 2017-10-10
#+LAYOUT: post
#+TAGS: cpp C++ C++11
#+CATEGORIES: C++

#+BEGIN_SRC cpp
/*
150	    testAA[1][2] = 100;
(gdb) x/10wx testAA
0x7fffffffdc30:	0x00000001	0x00000002	0x00000003	0x00000004
0x7fffffffdc40:	0x00000005	0x00000006	0x00000007	0x00000008
0x7fffffffdc50:	0x00000009	0x00000000
(gdb) x/3gx testPA
0x7fffffffdbf0:	0x00007fffffffdc24	0x00007fffffffdc18
0x7fffffffdc00:	0x00007fffffffdc0c
(gdb) p (void *)testPA1
$5 = (void *) 0x7fffffffdc24
(gdb) disassemble
Dump of assembler code for function main(int, char**):
   0x000000000040a2a0 <+0>:	push   %rbp
   0x000000000040a2a1 <+1>:	mov    %rsp,%rbp             ;; 保存栈帧位置
   0x000000000040a2a4 <+4>:	push   %rbx                  ;; 局部要使用的寄存器
   0x000000000040a2a5 <+5>:	sub    $0x98,%rsp            ;; 为局部变量压栈 压了152字节
   0x000000000040a2ac <+12>:	xor    %eax,%eax           ;; eax 置零
   0x000000000040a2ae <+14>:	lea    -0x64(%rbp),%rcx    ;; rcx = rbp - 100 \
   0x000000000040a2b2 <+18>:	lea    -0x58(%rbp),%rdx    ;; rdx = rbp - 88  |>　栈上三个变量的地址　相隔12个字节就是三个int
   0x000000000040a2b6 <+22>:	lea    -0x4c(%rbp),%r8     ;; r8 = rbp - 76   /
   0x000000000040a2ba <+26>:	movabs $0x40bb00,%r9
   0x000000000040a2c4 <+36>:	mov    $0x24,%r10d
   0x000000000040a2ca <+42>:	mov    %r10d,%r11d
   0x000000000040a2cd <+45>:	lea    -0x40(%rbp),%rbx
   0x000000000040a2d1 <+49>:	mov    %edi,-0xc(%rbp)
   0x000000000040a2d4 <+52>:	mov    %rsi,-0x18(%rbp)
   0x000000000040a2d8 <+56>:	mov    %rbx,%rdi
   0x000000000040a2db <+59>:	mov    %r9,%rsi
   0x000000000040a2de <+62>:	mov    %rdx,-0x88(%rbp)
   0x000000000040a2e5 <+69>:	mov    %r11,%rdx
   0x000000000040a2e8 <+72>:	mov    %r8,-0x90(%rbp)
   0x000000000040a2ef <+79>:	mov    %rcx,-0x98(%rbp)
   0x000000000040a2f6 <+86>:	mov    %eax,-0x9c(%rbp)
   0x000000000040a2fc <+92>:	callq  0x406090 <memcpy@plt>
   0x000000000040a301 <+97>:	mov    0x40bb24,%rcx
   0x000000000040a309 <+105>:	mov    %rcx,-0x4c(%rbp)
   0x000000000040a30d <+109>:	mov    0x40bb2c,%eax
   0x000000000040a314 <+116>:	mov    %eax,-0x44(%rbp)
   0x000000000040a317 <+119>:	mov    0x40bb30,%rcx
   0x000000000040a31f <+127>:	mov    %rcx,-0x58(%rbp)
   0x000000000040a323 <+131>:	mov    0x40bb38,%eax
   0x000000000040a32a <+138>:	mov    %eax,-0x50(%rbp)
   0x000000000040a32d <+141>:	mov    0x40bb3c,%rcx
   0x000000000040a335 <+149>:	mov    %rcx,-0x64(%rbp)
   0x000000000040a339 <+153>:	mov    0x40bb44,%eax
   0x000000000040a340 <+160>:	mov    %eax,-0x5c(%rbp)
   0x000000000040a343 <+163>:	mov    -0x90(%rbp),%rcx
   0x000000000040a34a <+170>:	mov    %rcx,-0x80(%rbp)
   0x000000000040a34e <+174>:	mov    -0x88(%rbp),%rdx
   0x000000000040a355 <+181>:	mov    %rdx,-0x78(%rbp)
   0x000000000040a359 <+185>:	mov    -0x98(%rbp),%rsi
   0x000000000040a360 <+192>:	mov    %rsi,-0x70(%rbp)
=> 0x000000000040a364 <+196>:	movl   $0x64,-0x2c(%rbp)
   0x000000000040a36b <+203>:	mov    -0x78(%rbp),%rdi
   0x000000000040a36f <+207>:	movl   $0xc8,0x8(%rdi)
   0x000000000040a376 <+214>:	mov    -0x9c(%rbp),%eax
   
   0x000000000040a37c <+220>:	add    $0x98,%rsp ;;调用结束弹栈
   0x000000000040a383 <+227>:	pop    %rbx
   0x000000000040a384 <+228>:	pop    %rbp
   0x000000000040a385 <+229>:	retq   
End of assembler dump.
(gdb) q
*/

int main(int argc, char *argv[]) {
    int testAA[3][3] = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9}}; //这里数组间都插入了4个字节的缝隙，对齐到了16字节，不知道具体原因
    int testPA1[] = {1, 2, 3};
    int testPA2[] = {4, 5, 6};
    int testPA3[] = {7, 8, 9};
    int *testPA[] = { testPA1, testPA2, testPA3 };

    testAA[1][2] = 100;
    testPA[1][2] = 200;
}
#+END_SRC
