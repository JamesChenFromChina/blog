#+TITLE: 动态规划
#+DATE: 2017-06-23
#+LAYOUT: post
#+TAGS: Algorithms ITA "dynamic programming"
#+CATEGORIES: Algorithms

动态规划（dynamic programming）是一种通过复用子问题的结果来求解原问题的算法，利用子问题重叠的情况来获取更好的性能（这里需要通过对原问题进行分解来获取重叠的子问题或者子子问题），动态规划一般用来求解最优化问题(在多个解中寻找最好的一个），

动态规划算法设计步骤：
|------+----------------------------|
| 序号 | 步骤                       |
| １   | 刻画一个最优解的结构特征   |
| ２   | 递归定义最优解的值         |
| ３   | 计算最优解的值             |
| ４   | 利用计算出的信息构造最优解 |
|------+----------------------------|

举个栗子，切钢条（不是辣条），不同长度的钢条可以卖不同价格比如切成３米的可以卖８块，但是切成１米的边角料就只能卖１块钱了，现在手里有根长度为ｎ的钢条，你可知怎么切最赚钱 ?

收购_辣条_钢条的价目表
|--------+-------|
| Length | Price |
|--------+-------|
|      1 |     1 |
|      2 |     5 |
|      3 |     8 |
|      4 |     9 |
|      5 |    10 |
|      6 |    17 |
|      7 |    17 |
|      8 |    20 |
|      9 |    24 |
|     10 |    30 |
|--------+-------|

再长的就没人要了估计也不好运。

比如说我有一根４米长的钢条，切成两个２米的卖１０块最赚钱。
最开始你可能这么干，做个价格表，自己把固定长度的最佳收益通过各种组合尝试算出来,比如
1+1+1+1 = 4
2+1+1   = 7
2+2     = 10
3+1     = 9
4       = 9
然后发现２＋２这个好啊小本子记下来，然后就有了下面这个本本

|------+------+--------------|
| 长度 | 价格 |     切割方案 |
|    1 |    1 |            1 |
|    2 |    5 |            2 |
|    3 |    8 |            3 |
|    4 |   10 |          2+2 |
|    5 |   13 |          2+3 |
|    6 |   17 |            6 |
|    7 |   18 | 1+6 or 2+2+3 |
|    8 |   22 |          2+6 |
|    9 |   25 |          3+6 |
|   10 |   30 |           10 |
|------+------+--------------|

很聪明的你算的时候就知道７米的最佳答案其实可以是两个段的最佳答案组合之一。你并不需要算 1+1+1+1+1+1+1 这种切割方案的价格是７，因为它可以转化成 1+6 这种切割方式，而我们都已经知道６米长的最佳切割方案是整根卖最划算了,这６米切了赔钱。所以在面对这个７米长的钢条的时候我们真正的选择仅仅是一个切割点，根据已有的价格选择这个点最合适的位置，比如说３＋４这个点，实际上我们已经知道了３米长的钢条不切最贵,其他的方法我们都已经试过了（１＋１＋１　２＋１什么的），而４米我们也知道２＋２对于４米来说是最好的方案，所以我们知道对于７米的钢条３＋４的这个点的最佳切割方式是２＋２＋３(2+2 是４最好的结果３是３最好的结果）其他的更详细的切法就不需要在尝试了（比如 3+2+1+1），但是对于 7 米长的钢条 3+4 是不是最佳切割点并不知道,需要比较其他的组合。
所以对于长度为 n 的钢条我们只需要在 0～n-1 之间找一个点切一刀，然后用两段的最佳切割方式切割，得到的价格就是两段最佳切割方式的价格，通过这种方法，我们可以在所有切割点中找到一个最佳的，这个就是通过子问题的最佳结果来获得原问题的最佳结果。而且在原问题划分为更小的子问题之后子问题还可以分解成子子问题，直到这个问题的解是一个已知答案，或者很容易获得答案。









