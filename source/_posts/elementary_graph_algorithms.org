#+TITLE: 图基本算法复习
#+DATE: 2017-06-22
#+LAYOUT: post
#+TAGS: Alogorithms Graph
#+CATEGORIES: Alogorithms

* 图的基本算法

一般使用　Ｖ表示图中的所有顶点的集合　Ｅ表示图中所有边的集合，　Ｇ＝（Ｖ，Ｅ）
计算复杂度的时候一般涉及两个输入作为计算规模　｜Ｖ｜　｜Ｅ｜ 即顶点数量和边的数量 O(VE) 表示　Ｏ（｜Ｖ｜｜Ｅ｜）

图搜索算法可以用来发现图的结构，所以一般的图算法在一开始都会先通过搜索来获取图的结构，其他的一些图算法则是对基本的搜索加以优化，***图的搜索技巧是整个图算法领域的核心***

** 图的两种表示法
   图有两种标准表示法
   1.邻接表集合　
   2.邻接矩阵

   两种表示法均可以表示有向图和无向图，但是对于稀疏图（边的数目｜Ｅ｜远小于｜Ｖ｜^2)使用邻接矩阵无疑会填很多０，所以更适合使用邻接表集合的方法表示，反之对于稠密图（边数目｜Ｅ｜接近｜Ｖ｜^2)使用邻接矩阵的表示方法无疑会提高缓存命中率而且使用随机存取性能会好很多(快速判断两个节点之间是否有边连接这种寻求比较强的时候也会使用邻接矩阵表示法)。
   
*** 邻接表集合
    邻接表集合是一个由｜Ｖ｜条链表组成的数组，暂且称之为Ａｄｊ，每个顶点都有一条对应的链表，对于第ｕ个顶点，链表 Adj[u]包含了与它直接由边连接的所有顶点(邻接结点）
    对于有向图(a,b)将只出现在 Adj[a]中，因此所有邻接链表的长度之和等于|E|，但是对于无向图边（a,b)就是边（b,a)所以这个边的表示会出现在 Adj[a]和 Adj[b]中，因此所有邻接链表的长度之和等于 2|E|
    无论是不是有向图空间复杂度都是 Θ（V+E）

    
**** 优点： 
     + 鲁棒性高,比较容易做数据结构的扩展，比如增加权重的时候可以直接在存储结点的结构中增加权重属性，表示对应边的权重。

**** 缺点：
     + 无法随机存取，判断边是否存在需要遍历链表，性能比较差。


*** 邻接矩阵
    通常在使用邻接矩阵表示图的时候需要将图中的结点编号为 1,2,3,4,5,6，…，|V|，这种编号可以是任意的（abc 神马的 无所谓） 图 G 的邻接矩阵表示由一个|V|×|V|的矩阵 A=(a_ij)予以表示，
